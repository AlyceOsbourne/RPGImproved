/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PythonScripterPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var path = __toESM(require("path"));
var fs = __toESM(require("fs"));
var import_child_process = require("child_process");
var DEFAULT_SETTINGS = {
  pythonPath: "",
  pythonExe: ""
};
var PythonScripterPlugin = class extends import_obsidian.Plugin {
  getBasePath() {
    let basePath;
    if (this.app.vault.adapter instanceof import_obsidian.FileSystemAdapter) {
      basePath = this.app.vault.adapter.getBasePath();
    } else {
      throw new Error("Cannot determine base path.");
    }
    return `${basePath}`;
  }
  async onload() {
    await this.loadSettings();
    var basePath = this.getBasePath();
    var defaultRelativePath = path.join(".", this.app.vault.configDir, "scripts", "python");
    this.pythonDirectory = path.join(basePath, defaultRelativePath);
    this.pythonDirectoryRelative = defaultRelativePath;
    if (this.settings.pythonPath != "") {
      this.pythonDirectory = path.join(basePath, this.settings.pythonPath);
      this.pythonDirectoryRelative = this.settings.pythonPath;
    } else {
      this.pythonDirectory = path.join(basePath, defaultRelativePath);
      this.pythonDirectoryRelative = defaultRelativePath;
    }
    console.log(this.pythonDirectoryRelative);
    try {
      await this.app.vault.createFolder(this.pythonDirectoryRelative);
    } catch (error) {
    }
    var files = fs.readdirSync(this.pythonDirectory);
    for (var index = 0; index < files.length; index++) {
      const filePath = path.join(this.pythonDirectory, files[index]);
      const fileName = files[index];
      const basePath2 = this.getBasePath();
      const obsidianCommand = {
        id: "run-" + files[index],
        name: "Run " + files[index],
        callback: () => {
          fs.stat(filePath, (err, stats) => {
            var _a, _b, _c, _d;
            if (err) {
              console.error(err);
              return;
            }
            let python_exe = "python";
            if (this.settings.pythonExe != "") {
              python_exe = this.settings.pythonExe;
            }
            if (stats.isFile()) {
              var local_current_file_path = (_b = (_a = this.app.workspace.activeEditor) == null ? void 0 : _a.file) == null ? void 0 : _b.path;
              if (local_current_file_path === void 0) {
                local_current_file_path = "";
              }
              (0, import_child_process.exec)(`${python_exe} "${filePath}" "${basePath2}" "${local_current_file_path}"`, { cwd: this.pythonDirectory }, (error, stdout, stderr) => {
                if (error) {
                  new import_obsidian.Notice(`Error executing script ${filePath}: ${error}`);
                  console.log(`Error executing script ${filePath}: ${error}`);
                  return;
                }
                new import_obsidian.Notice(`Script ` + fileName + ` output:
${stdout}`);
              });
            } else if (stats.isDirectory()) {
              var dir = path.join(filePath);
              var local_current_file_path = (_d = (_c = this.app.workspace.activeEditor) == null ? void 0 : _c.file) == null ? void 0 : _d.path;
              if (local_current_file_path === void 0) {
                local_current_file_path = "";
              }
              (0, import_child_process.exec)(`${python_exe} "${path.join(filePath, "src", "main.py")}" "${basePath2}" "${local_current_file_path}"`, { cwd: dir }, (error, stdout, stderr) => {
                if (error) {
                  new import_obsidian.Notice(`Error executing folder program: ${error}`);
                  console.log(`Error executing folder program: ${error}`);
                  return;
                }
                new import_obsidian.Notice(`Script ` + fileName + " " + basePath2 + ` output:
${stdout}`);
              });
            }
          });
        }
      };
      this.addCommand(obsidianCommand);
    }
    this.addSettingTab(new PythonScripterSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var PythonScripterSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Python Script Path").setDesc("Defaults to .obsidian\\scripts\\python").addText((text) => text.setPlaceholder("Enter path").setValue(this.plugin.settings.pythonPath).onChange(async (value) => {
      this.plugin.settings.pythonPath = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Python Executable").setDesc("Defaults to python").addText((text) => text.setPlaceholder("Enter path or command").setValue(this.plugin.settings.pythonExe).onChange(async (value) => {
      this.plugin.settings.pythonExe = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIEZpbGVTeXN0ZW1BZGFwdGVyLCBNYXJrZG93blZpZXcsIE1vZGFsLCBOb3RpY2UsIFBsdWdpbiwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZyB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5cblxuaW50ZXJmYWNlIFB5dGhvblNjcmlwdGVyU2V0dGluZ3Mge1xuXHRweXRob25QYXRoOiBzdHJpbmc7XG5cdHB5dGhvbkV4ZTogc3RyaW5nO1xufVxuXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBQeXRob25TY3JpcHRlclNldHRpbmdzID0ge1xuXHRweXRob25QYXRoOiBcIlwiLFxuXHRweXRob25FeGU6IFwiXCJcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHl0aG9uU2NyaXB0ZXJQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xuXHRzZXR0aW5nczogUHl0aG9uU2NyaXB0ZXJTZXR0aW5ncztcblx0cHl0aG9uRGlyZWN0b3J5OiBzdHJpbmc7XG5cdHB5dGhvbkRpcmVjdG9yeVJlbGF0aXZlOiBzdHJpbmc7XG5cblx0Z2V0QmFzZVBhdGgoKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IGJhc2VQYXRoO1xuICAgICAgICAvLyBiYXNlIHBhdGhcbiAgICAgICAgaWYgKHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIgaW5zdGFuY2VvZiBGaWxlU3lzdGVtQWRhcHRlcikge1xuICAgICAgICAgICAgYmFzZVBhdGggPSB0aGlzLmFwcC52YXVsdC5hZGFwdGVyLmdldEJhc2VQYXRoKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBkZXRlcm1pbmUgYmFzZSBwYXRoLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHtiYXNlUGF0aH1gO1xuICAgIH1cblxuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcblx0XHR2YXIgYmFzZVBhdGggPSB0aGlzLmdldEJhc2VQYXRoKCk7XG5cdFx0dmFyIGRlZmF1bHRSZWxhdGl2ZVBhdGg6IHN0cmluZyA9IHBhdGguam9pbihcIi5cIiwgdGhpcy5hcHAudmF1bHQuY29uZmlnRGlyLCBcInNjcmlwdHNcIiwgXCJweXRob25cIik7XG5cdFx0dGhpcy5weXRob25EaXJlY3RvcnkgPSBwYXRoLmpvaW4oYmFzZVBhdGgsIGRlZmF1bHRSZWxhdGl2ZVBhdGgpO1xuXHRcdHRoaXMucHl0aG9uRGlyZWN0b3J5UmVsYXRpdmUgPSBkZWZhdWx0UmVsYXRpdmVQYXRoXG5cdFx0aWYgKHRoaXMuc2V0dGluZ3MucHl0aG9uUGF0aCAhPSBcIlwiKSB7XG5cdFx0XHR0aGlzLnB5dGhvbkRpcmVjdG9yeSA9IHBhdGguam9pbihiYXNlUGF0aCwgdGhpcy5zZXR0aW5ncy5weXRob25QYXRoKTtcblx0XHRcdHRoaXMucHl0aG9uRGlyZWN0b3J5UmVsYXRpdmUgPSB0aGlzLnNldHRpbmdzLnB5dGhvblBhdGhcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5weXRob25EaXJlY3RvcnkgPSBwYXRoLmpvaW4oYmFzZVBhdGgsIGRlZmF1bHRSZWxhdGl2ZVBhdGgpO1xuXHRcdFx0dGhpcy5weXRob25EaXJlY3RvcnlSZWxhdGl2ZSA9IGRlZmF1bHRSZWxhdGl2ZVBhdGhcblx0XHR9XG5cdFx0Y29uc29sZS5sb2codGhpcy5weXRob25EaXJlY3RvcnlSZWxhdGl2ZSlcblx0XHR0cnkge1xuXHRcdFx0YXdhaXQgdGhpcy5hcHAudmF1bHQuY3JlYXRlRm9sZGVyKHRoaXMucHl0aG9uRGlyZWN0b3J5UmVsYXRpdmUpO1xuXHRcdFx0Ly9uZXcgTm90aWNlKHRoaXMucHl0aG9uRGlyZWN0b3J5ICsgXCIgY3JlYXRlZFwiKTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0Ly9uZXcgTm90aWNlKFwiRXJyb3IgY3JlYXRpbmcgXCIgKyB0aGlzLnB5dGhvbkRpcmVjdG9yeSk7XG5cdFx0fVxuXG5cdFx0dmFyIGZpbGVzOiBzdHJpbmdbXSA9IGZzLnJlYWRkaXJTeW5jKHRoaXMucHl0aG9uRGlyZWN0b3J5KTtcblx0XHRmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgZmlsZXMubGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0XHRjb25zdCBmaWxlUGF0aCA9IHBhdGguam9pbih0aGlzLnB5dGhvbkRpcmVjdG9yeSwgZmlsZXNbaW5kZXhdKTtcblx0XHRcdGNvbnN0IGZpbGVOYW1lID0gZmlsZXNbaW5kZXhdO1xuXHRcdFx0Y29uc3QgYmFzZVBhdGggPSB0aGlzLmdldEJhc2VQYXRoKCk7XG5cdFx0XHRjb25zdCBvYnNpZGlhbkNvbW1hbmQgPSB7XG5cdFx0XHRcdGlkOiBcInJ1bi1cIitmaWxlc1tpbmRleF0sXG5cdFx0XHRcdG5hbWU6ICdSdW4gJytmaWxlc1tpbmRleF0sXG5cdFx0XHRcdGNhbGxiYWNrOiAoKSA9PiB7XG5cdFx0XHRcdFx0ZnMuc3RhdChmaWxlUGF0aCwgKGVycjogYW55LCBzdGF0czogeyBpc0ZpbGU6ICgpID0+IGFueTsgaXNEaXJlY3Rvcnk6ICgpID0+IGFueTsgfSkgPT4ge1xuXHRcdFx0XHRcdFx0aWYgKGVycikge1xuXHRcdFx0XHRcdFx0ICBjb25zb2xlLmVycm9yKGVycik7XG5cdFx0XHRcdFx0XHQgIHJldHVybjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGxldCBweXRob25fZXhlID0gXCJweXRob25cIjtcdFxuXHRcdFx0XHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MucHl0aG9uRXhlICE9IFwiXCIpIHtcblx0XHRcdFx0XHRcdFx0cHl0aG9uX2V4ZSA9IHRoaXMuc2V0dGluZ3MucHl0aG9uRXhlXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoc3RhdHMuaXNGaWxlKCkpIHtcblx0XHRcdFx0XHRcdFx0dmFyICBsb2NhbF9jdXJyZW50X2ZpbGVfcGF0aCA9IHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVFZGl0b3I/LmZpbGU/LnBhdGg7XG5cdFx0XHRcdFx0XHRcdGlmIChsb2NhbF9jdXJyZW50X2ZpbGVfcGF0aCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0bG9jYWxfY3VycmVudF9maWxlX3BhdGggPSBcIlwiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cblx0XHRcdFx0XHRcdFx0ZXhlYyhgJHtweXRob25fZXhlfSBcXFwiJHtmaWxlUGF0aH1cXFwiIFxcXCIke2Jhc2VQYXRofVxcXCIgXFxcIiR7bG9jYWxfY3VycmVudF9maWxlX3BhdGh9XFxcImAsIHtjd2Q6IHRoaXMucHl0aG9uRGlyZWN0b3J5fSwgKGVycm9yOiBhbnksIHN0ZG91dDogYW55LCBzdGRlcnI6IGFueSkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChlcnJvcikge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3IE5vdGljZShgRXJyb3IgZXhlY3V0aW5nIHNjcmlwdCAke2ZpbGVQYXRofTogJHtlcnJvcn1gKTtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKGBFcnJvciBleGVjdXRpbmcgc2NyaXB0ICR7ZmlsZVBhdGh9OiAke2Vycm9yfWApXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdG5ldyBOb3RpY2UoYFNjcmlwdCBgICsgIGZpbGVOYW1lICsgYCBvdXRwdXQ6XFxuJHtzdGRvdXR9YCk7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChzdGF0cy5pc0RpcmVjdG9yeSgpKSB7IFxuXHRcdFx0XHRcdFx0XHR2YXIgZGlyID0gcGF0aC5qb2luKGZpbGVQYXRoKTtcblx0XHRcdFx0XHRcdFx0dmFyICBsb2NhbF9jdXJyZW50X2ZpbGVfcGF0aCA9IHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVFZGl0b3I/LmZpbGU/LnBhdGg7XG5cdFx0XHRcdFx0XHRcdGlmIChsb2NhbF9jdXJyZW50X2ZpbGVfcGF0aCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0bG9jYWxfY3VycmVudF9maWxlX3BhdGggPSBcIlwiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGV4ZWMoYCR7cHl0aG9uX2V4ZX0gXFxcIiR7cGF0aC5qb2luKGZpbGVQYXRoLCBcInNyY1wiLCBcIm1haW4ucHlcIil9XFxcIiBcXFwiJHtiYXNlUGF0aH1cXFwiIFxcXCIke2xvY2FsX2N1cnJlbnRfZmlsZV9wYXRofVxcXCJgLCB7Y3dkOiBkaXJ9LCAoZXJyb3I6IGFueSwgc3Rkb3V0OiBhbnksIHN0ZGVycjogYW55KSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGVycm9yKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXcgTm90aWNlKGBFcnJvciBleGVjdXRpbmcgZm9sZGVyIHByb2dyYW06ICR7ZXJyb3J9YCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhgRXJyb3IgZXhlY3V0aW5nIGZvbGRlciBwcm9ncmFtOiAke2Vycm9yfWApXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdG5ldyBOb3RpY2UoYFNjcmlwdCBgICsgIGZpbGVOYW1lICsgXCIgXCIgKyBiYXNlUGF0aCArIGAgb3V0cHV0OlxcbiR7c3Rkb3V0fWApO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHQgIH0pO1xuXHRcdFx0XHRcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy5hZGRDb21tYW5kKG9ic2lkaWFuQ29tbWFuZCk7XG5cdFx0fSBcblxuXHRcdC8vIFRoaXMgYWRkcyBhIHNldHRpbmdzIHRhYiBzbyB0aGUgdXNlciBjYW4gY29uZmlndXJlIHZhcmlvdXMgYXNwZWN0cyBvZiB0aGUgcGx1Z2luXG5cdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBQeXRob25TY3JpcHRlclNldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcblxuXHR9XG5cblx0b251bmxvYWQoKSB7XG5cblx0fVxuXG5cdGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcblx0fVxuXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuXHR9XG59XG5cbmNsYXNzIFB5dGhvblNjcmlwdGVyU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuXHRwbHVnaW46IFB5dGhvblNjcmlwdGVyUGx1Z2luO1xuXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IFB5dGhvblNjcmlwdGVyUGx1Z2luKSB7XG5cdFx0c3VwZXIoYXBwLCBwbHVnaW4pO1xuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xuXHR9XG5cblx0ZGlzcGxheSgpOiB2b2lkIHtcblx0XHRjb25zdCB7Y29udGFpbmVyRWx9ID0gdGhpcztcblxuXHRcdGNvbnRhaW5lckVsLmVtcHR5KCk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKCdQeXRob24gU2NyaXB0IFBhdGgnKVxuXHRcdFx0LnNldERlc2MoJ0RlZmF1bHRzIHRvIC5vYnNpZGlhblxcXFxzY3JpcHRzXFxcXHB5dGhvbicpXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCdFbnRlciBwYXRoJylcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnB5dGhvblBhdGgpXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5weXRob25QYXRoID0gdmFsdWU7XG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdH0pKTtcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKCdQeXRob24gRXhlY3V0YWJsZScpXG5cdFx0XHQuc2V0RGVzYygnRGVmYXVsdHMgdG8gcHl0aG9uJylcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuXHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIHBhdGggb3IgY29tbWFuZCcpXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5weXRob25FeGUpXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5weXRob25FeGUgPSB2YWx1ZTtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0fSkpO1xuXHR9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUErRztBQUMvRyxXQUFzQjtBQUN0QixTQUFvQjtBQUNwQiwyQkFBcUI7QUFRckIsSUFBTSxtQkFBMkM7QUFBQSxFQUNoRCxZQUFZO0FBQUEsRUFDWixXQUFXO0FBQ1o7QUFFQSxJQUFxQix1QkFBckIsY0FBa0QsdUJBQU87QUFBQSxFQUt4RCxjQUFzQjtBQUNmLFFBQUk7QUFFSixRQUFJLEtBQUssSUFBSSxNQUFNLG1CQUFtQixtQ0FBbUI7QUFDckQsaUJBQVcsS0FBSyxJQUFJLE1BQU0sUUFBUSxZQUFZO0FBQUEsSUFDbEQsT0FBTztBQUNILFlBQU0sSUFBSSxNQUFNLDZCQUE2QjtBQUFBLElBQ2pEO0FBQ0EsV0FBTyxHQUFHO0FBQUEsRUFDZDtBQUFBLEVB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
