/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => calloutIntegrator
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var calloutIntegrator = class extends import_obsidian.Plugin {
  onload() {
    function order(editor) {
      const head = editor.getCursor("head");
      const anchor = editor.getCursor("anchor");
      if (head.line < anchor.line || head.line == anchor.line && head.ch < anchor.ch)
        return [head, anchor, false];
      else
        return [anchor, head, true];
    }
    function setAnchorHead(pos, editor) {
      if (pos[2])
        editor.setSelection(pos[0], pos[1]);
      else
        editor.setSelection(pos[1], pos[0]);
    }
    function unInt(editor, pos) {
      let str = editor.getLine(pos.line);
      let move = 0;
      if (str.charAt(0) === ">") {
        str = str.substring(1);
        move--;
        if (pos.ch != 0)
          pos.ch--;
        if (str.charAt(0) === " ") {
          str = str.substring(1);
          move--;
          if (pos.ch != 0)
            pos.ch--;
        }
      }
      return [str, pos, move];
    }
    function intNoSelection(editor) {
      const pos = editor.getCursor();
      const thisLine = editor.getLine(pos.line);
      editor.setLine(pos.line, "> " + thisLine);
      if (pos.ch != 0 || thisLine.charAt(0) != ">")
        editor.setCursor({ line: pos.line, ch: pos.ch + 2 });
    }
    function intSelection(editor) {
      const pos = order(editor);
      if (pos[0].line - pos[1].line != 0)
        editor.replaceSelection(editor.getSelection().replace(/\n/g, "\n> "));
      editor.setLine(pos[0].line, "> " + editor.getLine(pos[0].line));
      if (pos[0].ch != 0)
        pos[0].ch += 2;
      pos[1].ch += 2;
      setAnchorHead(pos, editor);
    }
    function unIntNoSelection(editor) {
      const pos = editor.getCursor();
      const thisLine = unInt(editor, pos);
      editor.setLine(pos.line, thisLine[0]);
      editor.setCursor(thisLine[1]);
    }
    function unIntSelection(editor) {
      const pos = order(editor);
      const firstLine = unInt(editor, pos[0]);
      const lastLine = unInt(editor, pos[1]);
      pos[0] = firstLine[1];
      pos[1] = lastLine[1];
      if (pos[0].line != pos[1].line) {
        if (pos[1].line - pos[0].line > 1)
          editor.replaceSelection(editor.getSelection().replace(/\n> /g, "\n"));
        editor.setLine(lastLine[1].line, lastLine[0]);
      }
      editor.setLine(firstLine[1].line, firstLine[0]);
      setAnchorHead(pos, editor);
    }
    this.addCommand({
      id: "callout-integrate",
      name: "integrate",
      icon: "chevrons-right",
      editorCallback: (editor) => {
        if (!editor.somethingSelected())
          intNoSelection(editor);
        else
          intSelection(editor);
      }
    });
    this.addCommand({
      id: "callout-unintegrate",
      name: "un-integrate",
      icon: "chevrons-left",
      editorCallback: (editor) => {
        if (!editor.somethingSelected())
          unIntNoSelection(editor);
        else
          unIntSelection(editor);
      }
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,
